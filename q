^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000   1) # Imports
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000   2) from sly import Lexer
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000   3) from sly import Parser
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000   4) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000   5) # Lexer Class Start
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000   6) class BasicLexer(Lexer):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000   7)     tokens = { NAAM, NUMBER, STRING }
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000   8)     ignore = '\t '
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000   9)     literals = { '=', '+', '-', '/', 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  10)                 '*', '(', ')', ',', ';'}
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  11)   
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  12)   
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  13)     # Define tokens as regular expressions
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  14)     # (stored as raw strings)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  15)     NAAM = r'[a-zA-Z_][a-zA-Z0-9_]*'
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  16)     STRING = r'\".*?\"'
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  17)   
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  18)     # Number token
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  19)     @_(r'\d+')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  20)     def NUMBER(self, t):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  21)         
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  22)         # convert it into a python integer
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  23)         t.value = int(t.value) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  24)         return t
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  25)   
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  26)     # Comment token
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  27)     @_(r'//.*')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  28)     def COMMENT(self, t):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  29)         pass
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  30)   
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  31)     # Newline token(used only for showing
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  32)     # errors in new line)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  33)     @_(r'\n+')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  34)     def NEWLINE(self, t):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  35)         self.lineno = t.value.count('\n')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  36) # Lexer Class End
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  37) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  38) # Parser Class Start
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  39) class BasicParser(Parser):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  40) 	#tokens are passed from lexer to parser
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  41) 	tokens = BasicLexer.tokens
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  42) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  43) 	precedence = (
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  44) 		('left', '+', '-'),
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  45) 		('left', '*', '/'),
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  46) 		('right', 'UMINUS'),
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  47) 	)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  48) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  49) 	def __init__(self):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  50) 		self.env = { }
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  51) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  52) 	@_('')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  53) 	def statement(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  54) 		pass
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  55) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  56) 	@_('var_assign')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  57) 	def statement(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  58) 		return p.var_assign
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  59) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  60) 	@_('NAAM "=" expr')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  61) 	def var_assign(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  62) 		return ('var_assign', p.NAAM, p.expr)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  63) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  64) 	@_('NAAM "=" STRING')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  65) 	def var_assign(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  66) 		return ('var_assign', p.NAAM, p.STRING)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  67) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  68) 	@_('expr')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  69) 	def statement(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  70) 		return (p.expr)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  71) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  72) 	@_('expr "+" expr')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  73) 	def expr(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  74) 		return ('add', p.expr0, p.expr1)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  75) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  76) 	@_('expr "-" expr')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  77) 	def expr(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  78) 		return ('sub', p.expr0, p.expr1)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  79) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  80) 	@_('expr "*" expr')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  81) 	def expr(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  82) 		return ('mul', p.expr0, p.expr1)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  83) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  84) 	@_('expr "/" expr')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  85) 	def expr(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  86) 		return ('div', p.expr0, p.expr1)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  87) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  88) 	@_('"-" expr %prec UMINUS')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  89) 	def expr(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  90) 		return p.expr
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  91) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  92) 	@_('NAAM')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  93) 	def expr(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  94) 		return ('var', p.NAAM)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  95) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  96) 	@_('NUMBER')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  97) 	def expr(self, p):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  98) 		return ('num', p.NUMBER)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000  99) # Parser Class End
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 100) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 101) # Execution Class Start
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 102) class BasicExecute:
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 103) 	
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 104) 	def __init__(self, tree, env):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 105) 		self.env = env
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 106) 		result = self.walkTree(tree)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 107) 		if result is not None and isinstance(result, int):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 108) 			print(result)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 109) 		if isinstance(result, str) and result[0] == '"':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 110) 			print(result)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 111) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 112) 	def walkTree(self, node):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 113) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 114) 		if isinstance(node, int):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 115) 			return node
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 116) 		if isinstance(node, str):
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 117) 			return node
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 118) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 119) 		if node is None:
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 120) 			return None
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 121) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 122) 		if node[0] == 'program':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 123) 			if node[1] == None:
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 124) 				self.walkTree(node[2])
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 125) 			else:
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 126) 				self.walkTree(node[1])
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 127) 				self.walkTree(node[2])
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 128) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 129) 		if node[0] == 'num':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 130) 			return node[1]
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 131) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 132) 		if node[0] == 'str':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 133) 			return node[1]
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 134) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 135) 		if node[0] == 'add':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 136) 			return self.walkTree(node[1]) + self.walkTree(node[2])
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 137) 		elif node[0] == 'sub':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 138) 			return self.walkTree(node[1]) - self.walkTree(node[2])
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 139) 		elif node[0] == 'mul':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 140) 			return self.walkTree(node[1]) * self.walkTree(node[2])
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 141) 		elif node[0] == 'div':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 142) 			return self.walkTree(node[1]) / self.walkTree(node[2])
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 143) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 144) 		if node[0] == 'var_assign':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 145) 			self.env[node[1]] = self.walkTree(node[2])
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 146) 			return node[1]
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 147) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 148) 		if node[0] == 'var':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 149) 			try:
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 150) 				return self.env[node[1]]
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 151) 			except LookupError:
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 152) 				print("Undefined variable '"+node[1]+"' found!")
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 153) 				return 0
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 154) # Execution Class End
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 155) 
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 156) # Execution Start
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 157) if __name__ == '__main__':
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 158) 	lexer = BasicLexer()
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 159) 	parser = BasicParser()
84f23d93 (BLA4KM4MBA 2021-03-28 13:20:37 +0530 160) 	print('WiseLang v0.1 lawda:')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 161) 	env = {}
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 162) 	
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 163) 	while True:
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 164) 		
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 165) 		try:
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 166) 			text = input('WiseLang > ')
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 167) 		
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 168) 		except EOFError:
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 169) 			break
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 170) 		
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 171) 		if text:
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 172) 			tree = parser.parse(lexer.tokenize(text))
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 173) 			BasicExecute(tree, env)
^dfb29c0 (Sakon      2021-03-28 07:27:41 +0000 174) # Execution End
